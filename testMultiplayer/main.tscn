[gd_scene load_steps=15 format=3 uid="uid://d4cyor045brlr"]

[ext_resource type="Texture2D" uid="uid://c056bh175wcr" path="res://icon.svg" id="1_44y2y"]
[ext_resource type="PackedScene" uid="uid://bx6j1445ndl7x" path="res://mp_character.tscn" id="2_tthkw"]
[ext_resource type="Script" path="res://versionLabel.gd" id="3_lkgk7"]

[sub_resource type="GDScript" id="GDScript_xoiub"]
script/source = "extends Node



@export var clearOldMessages = true

var peer:ENetMultiplayerPeer = null

var mpInterface:MultiplayerAPI

signal playerConnected(id:int)
signal playerDisconnected(id:int)
signal gameStart()
signal gameEnd()

func _ready():
	mpInterface = MultiplayerAPI.create_default_interface()
	get_tree().set_multiplayer(mpInterface)
	
	mpInterface.connected_to_server.connect(connected_to_server)
	mpInterface.connection_failed.connect(connection_failed)
	mpInterface.peer_connected.connect(peer_connected)
	mpInterface.peer_disconnected.connect(peer_disconnected)
	mpInterface.server_disconnected.connect(server_disconnected)
	createMsg(\"start up!\")





func cleanupNetwork():
	var p = get_tree().get_multiplayer().multiplayer_peer
	if p == null:
		return
	p.close()
	get_tree().get_multiplayer().multiplayer_peer = null
	gameEnd.emit()


func createMsg(msg:String):
	var box := %messageQueue
	var l = Label.new()
	l.text = msg
	box.add_child(l)
	if clearOldMessages:
		await(get_tree().create_timer(10).timeout)
		l.queue_free()


func connected_to_server():
	gameStart.emit()
	createMsg(\"connected_to_server\")
	%state.text = \"CONNECTED!\"


func connection_failed():
	createMsg(\"connection_failed\")
	%state.text = \"FAILED TO CONNECT!\"


func peer_connected(n:int):
	playerConnected.emit(n)
	createMsg(\"peer_connected :%d\" % n)


func peer_disconnected(n:int):
	playerDisconnected.emit(n)
	createMsg(\"peer_disconnected :%d\" % n)


func server_disconnected():
	createMsg(\"server_disconnected\")
	%state.text = \"DISCONNECTED!\"
	gameEnd.emit()

func endGame():
	gameEnd.emit()
	
func startGame():
	gameStart.emit()
#	gameStart.emit()
"

[sub_resource type="GDScript" id="GDScript_lehj8"]
script/source = "extends Label


func _process(delta):
	var t = get_tree().get_multiplayer().get_unique_id()

	text = \"current %d\\n\" % t
	var a = get_tree().get_multiplayer().get_peers()
	for i in a:
		text += \"%d,\" % i
"

[sub_resource type="GDScript" id="GDScript_yp1g5"]
script/source = "extends HBoxContainer

#enum DECIDE_MULTIPLAYER {
#	STEAM,
#	ENET
#}
#
#
#@export var multiplayerBackend:DECIDE_MULTIPLAYER = DECIDE_MULTIPLAYER.STEAM
#
#
#func _ready():
#	match multiplayerBackend:
#		DECIDE_MULTIPLAYER.STEAM:
#			%steam.visible = true
#			%enet.visible = false
#		DECIDE_MULTIPLAYER.ENET:
#			%steam.visible = false
#			%enet.visible = true
"

[sub_resource type="GDScript" id="GDScript_v4g54"]
script/source = "extends VBoxContainer


signal gameStart
signal cleanup
signal msg(text:String)
signal gameEnd
# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	pass

func _on_host_pressed():
	cleanup.emit()
	var peer := ENetMultiplayerPeer.new()
	var a = peer.create_server(%portNumber.value)

	get_tree().get_multiplayer().multiplayer_peer = peer
	msg.emit(\"hosting!\")
	
	%state.text = \"HOSTING\"
	gameStart.emit()
	blurAll()
	
func _on_join_pressed():
	cleanup.emit()
	
	var peer := ENetMultiplayerPeer.new()
	var a = peer.create_client(%ipAddress.text,%portNumber.value)
	get_tree().get_multiplayer().multiplayer_peer = peer
	msg.emit(\"joining!\")

	%state.text = \"JOINING!\"
	blurAll()

func _on_quit_pressed():
	get_tree().get_multiplayer().multiplayer_peer.close()
	cleanup.emit()
	%state.text = \"QUITED!\"


func blurAll():
	$HBoxContainer/Host.release_focus()
	$HBoxContainer/Join.release_focus()
	%ipAddress.release_focus()
	%portNumber.release_focus()
	
	


func _on_ip_address_text_submitted(new_text):
	_on_join_pressed()
"

[sub_resource type="GDScript" id="GDScript_xrfl3"]
script/source = "extends VBoxContainer

signal gameStart
signal cleanup
signal msg(text:String)
signal gameEnd


@export var useSteam =false
@export var networkManager:Node

var peer :SteamMultiplayerPeer

func _ready():
	if useSteam == false:
		queue_free()
		return
	var a = Steam.steamInit()
	assert(a.status == 1,\"steam did not init properly. msg:\" + a.verbal )
	
	Steam.join_requested.connect(join_requested)


func join_requested(lobby_id, steam_id):
	networkManager.createMsg(\"join_requested!\")
	
	setUpNewPeer()
	peer.connect_lobby(lobby_id)
	get_tree().get_multiplayer().set_multiplayer_peer(peer)
#	gameStart.emit()

func _process(delta):
	Steam.run_callbacks()
	if peer != null:
		%debugData.text = JSON.stringify(peer.collect_debug_data(),\" \")
		pass
	pass


func _on_host_pressed():
	setUpNewPeer()
	networkManager.createMsg(\"hosting!\")
	peer.create_lobby(SteamMultiplayerPeer.PRIVATE,99)
	
	get_tree().get_multiplayer().set_multiplayer_peer(peer)
	gameStart.emit()
	pass # Replace with function body.


func lobby_created(m_eResult,lobbyId):
	assert(m_eResult==1,\"lobby failed to build\")
	
	print(\"lobbyID: %s\" %lobbyId)
	
	pass


func setUpNewPeer():
	peer = SteamMultiplayerPeer.new()
	peer.lobby_created.connect(lobby_created)
	


func _on_quit_pressed():
	if peer == null:
		return #do nothing
	peer.close()
	peer = null
"

[sub_resource type="GDScript" id="GDScript_kw7au"]
script/source = "extends VBoxContainer


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	pass


func _on_button_pressed():
	rpc(\"playPing\")
	pass # Replace with function body.


@rpc(\"any_peer\", \"call_local\")
func playPing():
	$AnimationPlayer.play(\"ping\")
"

[sub_resource type="Animation" id="Animation_5so1b"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("icon:self_modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 1)]
}

[sub_resource type="Animation" id="Animation_4x4ii"]
resource_name = "ping"
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("icon:self_modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [Color(1, 0, 0, 1), Color(1, 1, 1, 1)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_l4pwk"]
_data = {
"RESET": SubResource("Animation_5so1b"),
"ping": SubResource("Animation_4x4ii")
}

[sub_resource type="GDScript" id="GDScript_ra7gh"]
script/source = "extends Node

@export var character:PackedScene

var players := {}

func _ready():
	$PlayerSpawner.spawn_function = spawnPlayer
	pass


func spawnPlayer(id)->Node:
	var p = character.instantiate()
	p.set_multiplayer_authority(id)
	p.name = \"player%d\" % id
#	add_child(p,true)
	players[id] = p
	return p

func _on_node_game_start():
	
	var id = get_tree().get_multiplayer().get_unique_id()
	if id == 1:
		$PlayerSpawner.spawn(id)
#	spawnPlayer(id)
	
#	$MultiplayerSpawner.spawn()
#	pass # Replace with function body.


func _on_node_player_connected(id):
	if is_multiplayer_authority():
		$PlayerSpawner.spawn(id)


func _on_node_player_disconnected(id):
	if is_multiplayer_authority():
		players[id].free()
		players.erase(id)


func _on_node_game_end():
	for id in players:
		players[id].free()
		players.erase(id)


"

[sub_resource type="GDScript" id="GDScript_hf7d5"]
script/source = "extends Label


func _on_button_pressed():
	DisplayServer.clipboard_set(text)
"

[node name="Node" type="Node"]
script = SubResource("GDScript_xoiub")
clearOldMessages = false

[node name="connectPanel" type="PanelContainer" parent="."]
anchors_preset = 9
anchor_bottom = 1.0
offset_right = 628.0
grow_vertical = 2

[node name="MarginContainer" type="MarginContainer" parent="connectPanel"]
layout_mode = 2
theme_override_constants/margin_left = 16
theme_override_constants/margin_top = 16
theme_override_constants/margin_right = 16
theme_override_constants/margin_bottom = 16

[node name="VBoxContainer" type="VBoxContainer" parent="connectPanel/MarginContainer"]
layout_mode = 2

[node name="state" type="Label" parent="connectPanel/MarginContainer/VBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
text = "Not Running"
horizontal_alignment = 1

[node name="Label" type="Label" parent="connectPanel/MarginContainer/VBoxContainer"]
layout_mode = 2
script = SubResource("GDScript_lehj8")

[node name="HBoxContainer" type="HBoxContainer" parent="connectPanel/MarginContainer/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3
script = SubResource("GDScript_yp1g5")

[node name="enet" type="VBoxContainer" parent="connectPanel/MarginContainer/VBoxContainer/HBoxContainer"]
unique_name_in_owner = true
layout_mode = 2
alignment = 1
script = SubResource("GDScript_v4g54")

[node name="EnetTitle" type="Label" parent="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/enet"]
layout_mode = 2
text = "ENet"

[node name="HBoxContainer" type="HBoxContainer" parent="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/enet"]
layout_mode = 2

[node name="Host" type="Button" parent="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/enet/HBoxContainer"]
layout_mode = 2
size_flags_horizontal = 3
focus_mode = 0
text = "Host"

[node name="Join" type="Button" parent="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/enet/HBoxContainer"]
layout_mode = 2
size_flags_horizontal = 3
focus_mode = 0
text = "Join
"

[node name="ipAddress" type="LineEdit" parent="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/enet"]
unique_name_in_owner = true
custom_minimum_size = Vector2(150, 0)
layout_mode = 2
text = "localhost"
placeholder_text = "IP"

[node name="portNumber" type="SpinBox" parent="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/enet"]
unique_name_in_owner = true
layout_mode = 2
max_value = 65535.0
value = 8888.0

[node name="Quit" type="Button" parent="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/enet"]
layout_mode = 2
focus_mode = 0
text = "Quit"

[node name="ScrollContainer" type="ScrollContainer" parent="connectPanel/MarginContainer/VBoxContainer/HBoxContainer"]
layout_mode = 2
size_flags_horizontal = 3
horizontal_scroll_mode = 0

[node name="messageQueue" type="VBoxContainer" parent="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/ScrollContainer"]
unique_name_in_owner = true
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="spacer" type="Control" parent="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/ScrollContainer/messageQueue"]
layout_mode = 2
size_flags_vertical = 3

[node name="steam" type="VBoxContainer" parent="connectPanel/MarginContainer/VBoxContainer/HBoxContainer" node_paths=PackedStringArray("networkManager")]
unique_name_in_owner = true
layout_mode = 2
alignment = 1
script = SubResource("GDScript_xrfl3")
useSteam = true
networkManager = NodePath("../../../../..")

[node name="SteamTitle" type="Label" parent="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/steam"]
layout_mode = 2
text = "Steam"

[node name="Host" type="Button" parent="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/steam"]
layout_mode = 2
focus_mode = 0
text = "Host"

[node name="Quit" type="Button" parent="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/steam"]
layout_mode = 2
focus_mode = 0
text = "Quit"

[node name="pingPanel" type="VBoxContainer" parent="."]
offset_left = 1133.0
offset_top = 17.0
offset_right = 1261.0
offset_bottom = 180.0
rotation = 1.5708
script = SubResource("GDScript_kw7au")

[node name="icon" type="TextureRect" parent="pingPanel"]
clip_contents = true
layout_mode = 2
texture = ExtResource("1_44y2y")

[node name="Button" type="Button" parent="pingPanel"]
layout_mode = 2
focus_mode = 0
text = "ping!"

[node name="AnimationPlayer" type="AnimationPlayer" parent="pingPanel"]
speed_scale = 5.0
libraries = {
"": SubResource("AnimationLibrary_l4pwk")
}

[node name="dumbGame" type="Node" parent="."]
script = SubResource("GDScript_ra7gh")
character = ExtResource("2_tthkw")

[node name="StaticBody2D" type="StaticBody2D" parent="dumbGame"]

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="dumbGame/StaticBody2D"]
polygon = PackedVector2Array(0, 0, 0, 648, 1152, 648, 1152, 0, 0, 0, -64, -64, 1216, -64, 1216, 712, -64, 712, -64, -64)

[node name="PlayerSpawner" type="MultiplayerSpawner" parent="dumbGame"]
spawn_path = NodePath("..")

[node name="verionChcker" type="PanelContainer" parent="."]
offset_left = 643.0
offset_top = 16.0
offset_right = 935.0
offset_bottom = 239.0

[node name="VBoxContainer" type="VBoxContainer" parent="verionChcker"]
layout_mode = 2

[node name="Label" type="Label" parent="verionChcker/VBoxContainer"]
layout_mode = 2
text = "hello world"
script = ExtResource("3_lkgk7")

[node name="ScrollContainer" type="ScrollContainer" parent="verionChcker/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3

[node name="debugData" type="Label" parent="verionChcker/VBoxContainer/ScrollContainer"]
unique_name_in_owner = true
layout_mode = 2
text = "hello world"
script = SubResource("GDScript_hf7d5")

[node name="Button" type="Button" parent="verionChcker/VBoxContainer"]
layout_mode = 2
text = "Copy Debug Data"

[connection signal="gameEnd" from="." to="dumbGame" method="_on_node_game_end"]
[connection signal="gameStart" from="." to="dumbGame" method="_on_node_game_start"]
[connection signal="playerConnected" from="." to="dumbGame" method="_on_node_player_connected"]
[connection signal="playerDisconnected" from="." to="dumbGame" method="_on_node_player_disconnected"]
[connection signal="cleanup" from="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/enet" to="." method="cleanupNetwork"]
[connection signal="gameEnd" from="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/enet" to="." method="endGame"]
[connection signal="gameStart" from="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/enet" to="." method="startGame"]
[connection signal="msg" from="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/enet" to="." method="createMsg"]
[connection signal="pressed" from="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/enet/HBoxContainer/Host" to="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/enet" method="_on_host_pressed"]
[connection signal="pressed" from="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/enet/HBoxContainer/Join" to="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/enet" method="_on_join_pressed"]
[connection signal="text_submitted" from="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/enet/ipAddress" to="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/enet" method="_on_ip_address_text_submitted"]
[connection signal="pressed" from="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/enet/Quit" to="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/enet" method="_on_quit_pressed"]
[connection signal="cleanup" from="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/steam" to="." method="cleanupNetwork"]
[connection signal="gameStart" from="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/steam" to="." method="startGame"]
[connection signal="msg" from="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/steam" to="." method="createMsg"]
[connection signal="pressed" from="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/steam/Host" to="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/steam" method="_on_host_pressed"]
[connection signal="pressed" from="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/steam/Quit" to="connectPanel/MarginContainer/VBoxContainer/HBoxContainer/steam" method="_on_quit_pressed"]
[connection signal="pressed" from="pingPanel/Button" to="pingPanel" method="_on_button_pressed"]
[connection signal="pressed" from="verionChcker/VBoxContainer/Button" to="verionChcker/VBoxContainer/ScrollContainer/debugData" method="_on_button_pressed"]
